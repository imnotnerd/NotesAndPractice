Title         : Javascript继承
Author        : Tommyyc
Logo          : True

[TITLE]

# JS中的继承

##类式继承
<code><pre> function Person(name){
  　　　　this.name = name;
  　　}  //实现一个超类
    Person.prototype.getName =function(){
     　　returnthis.name;
  　　}
 //实例化这个超类
 　　var a =new Person('Darren1')
 　　alert(a.getName());
 　　//再声明类
 　　function Programmer(name,sex){
    　　//这个类中要调用超类Person的构造函数，并将参数name传给它
    　　Person.call(this,name);
    　　this.sex = sex;
 　　} 
    Programmer.prototype =new Person();
    //因为子类的原型对象等于超类的实例，所以prototype.constructor这个方法也等于超类构造函数，你可以自己测试一下，如果没这一步，alert(Programmer.prototype.constructor)，这个是Person超类的引用，所以要从新赋值为自己本身
    Programmer.prototype.constructor = Programmer;
 　　//子类本身添加了getSex 方法
 　　Programmer.prototype.getSex =function(){
    　　returnthis.sex;
 　　}
 　　//实例化这个子类
 　　var _m =new Programmer('Darren2','male');
 　　//自身的方法
 　　alert(_m.getSex());
 　　//继承超类的方法
 　　alert(_m.getName());</pre></code>
 ##原型式继承
 <code><pre>　//clone()函数用来创建新的类Person对象
  　　var clone =function(obj){
      var _f =function(){};
     　　//这句是原型式继承最核心的地方，函数的原型对象为对象字面量
     　　_f.prototype = obj; 
     　　returnnew _f;
  　　}
  　　//先声明一个对象字面量
 　　var Person = {
    　　name:'Darren',
    　　getName:function(){
      　　returnthis.name;
    　　}
 　　}
 　　//不需要定义一个Person的子类，只要执行一次克隆即可
 　　var Programmer = clone(Person);
 　　//可以直接获得Person提供的默认值，也可以添加或者修改属性和方法
 　　alert(Programmer.getName())
 　　Programmer.name ='Darren2'
 　　alert(Programmer.getName())
 　　//声明子类,执行一次克隆即可
 　　var Someone = clone(Programmer);
 </pre></code>